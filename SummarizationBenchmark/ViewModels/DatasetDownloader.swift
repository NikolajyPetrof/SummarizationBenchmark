//
//  DatasetDownloader.swift
//  SummarizationBenchmark
//
//  Created by Nikolay Petrov on 27.06.2025.
//

import Foundation
import SwiftUI

/// –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ HuggingFace API
@MainActor
class DatasetDownloader: ObservableObject {
    /// –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    @Published var isDownloading = false
    @Published var downloadProgress: Double = 0.0
    @Published var statusMessage = ""
    @Published var errorMessage: String?
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ CNN/DailyMail –¥–∞—Ç–∞—Å–µ—Ç–∞
    func downloadCNNDailyMailDataset(sampleSize: Int = DatasetConstants.mediumSampleSize) async -> Dataset? {
        return await downloadHuggingFaceDataset(
            name: "CNN/DailyMail",
            description: "–î–∞—Ç–∞—Å–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π CNN –∏ DailyMail —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ —Å–∞–º–º–∞—Ä–∏",
            source: .cnnDailyMail,
            category: .news,
            huggingFaceId: "abisee/cnn_dailymail",
            config: "3.0.0",
            textField: "article",
            summaryField: "highlights",
            sampleSize: sampleSize
        )
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ Reddit TIFU –¥–∞—Ç–∞—Å–µ—Ç–∞
    func downloadRedditTIFUDataset(sampleSize: Int = DatasetConstants.mediumSampleSize) async -> Dataset? {
        return await downloadHuggingFaceDataset(
            name: "Reddit TIFU",
            description: "–î–∞—Ç–∞—Å–µ—Ç –ø–æ—Å—Ç–æ–≤ Reddit TIFU —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏–∑–ª–æ–∂–µ–Ω–∏—è–º–∏",
            source: .redditTIFU,
            category: .social,
            huggingFaceId: "reddit_tifu",
            config: "long",
            textField: "documents",
            summaryField: "tldr",
            sampleSize: sampleSize
        )
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ Scientific Abstracts –¥–∞—Ç–∞—Å–µ—Ç–∞
    func downloadScientificAbstractsDataset(sampleSize: Int = DatasetConstants.mediumSampleSize) async -> Dataset? {
        return await downloadHuggingFaceDataset(
            name: "Scientific Abstracts (PubMed)",
            description: "–î–∞—Ç–∞—Å–µ—Ç –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–∞–º–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
            source: .scientificAbstracts,
            category: .scientific,
            huggingFaceId: "abisee/cnn_dailymail",
            config: "3.0.0",
            textField: "article",
            summaryField: "highlights",
            sampleSize: sampleSize
        )
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ ArXiv Papers –¥–∞—Ç–∞—Å–µ—Ç–∞
    func downloadArXivDataset(sampleSize: Int = DatasetConstants.mediumSampleSize) async -> Dataset? {
        return await downloadHuggingFaceDataset(
            name: "ArXiv Papers",
            description: "–î–∞—Ç–∞—Å–µ—Ç –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π ArXiv —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–∞–º–∏",
            source: .arxivPapers,
            category: .scientific,
            huggingFaceId: "EdinburghNLP/xsum",
            config: nil,
            textField: "document",
            summaryField: "summary",
            sampleSize: sampleSize
        )
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å HuggingFace API
    private func downloadHuggingFaceDataset(
        name: String,
        description: String,
        source: Dataset.DatasetSource,
        category: Dataset.DatasetCategory,
        huggingFaceId: String,
        config: String? = nil,
        textField: String,
        summaryField: String,
        sampleSize: Int
    ) async -> Dataset? {
        await MainActor.run {
            isDownloading = true
            downloadProgress = 0.0
            statusMessage = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ \(name)..."
            errorMessage = nil
        }
        
        do {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
            await MainActor.run {
                statusMessage = "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ..."
                downloadProgress = 0.1
            }
            
            let datasetInfo = try await HuggingFaceAPI.fetchDatasetInfo(
                dataset: huggingFaceId,
                config: config
            )
            
            let trainSplit = datasetInfo.dataset_info.splits["train"]
            let numRows = trainSplit?.num_examples ?? 0
            
            print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ \(name):")
            print("   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: \(numRows)")
            print("   - –ü–æ–ª—è: \(datasetInfo.dataset_info.features.keys.joined(separator: ", "))")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            guard datasetInfo.dataset_info.features[textField] != nil else {
                throw HuggingFaceError.fieldNotFound(textField)
            }
            guard datasetInfo.dataset_info.features[summaryField] != nil else {
                throw HuggingFaceError.fieldNotFound(summaryField)
            }
            
            await MainActor.run {
                statusMessage = "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
                downloadProgress = 0.3
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
            var allEntries: [DatasetEntry] = []
            let batchSize = min(sampleSize, 100) // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
            let totalBatches = (sampleSize + batchSize - 1) / batchSize
            
            for batchIndex in 0..<totalBatches {
                let offset = batchIndex * batchSize
                let length = min(batchSize, sampleSize - offset)
                
                if Task.isCancelled {
                    await MainActor.run {
                        isDownloading = false
                        statusMessage = "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    }
                    return nil
                }
                
                let response = try await HuggingFaceAPI.fetchDatasetRows(
                    dataset: huggingFaceId,
                    config: config,
                    offset: offset,
                    length: length
                )
                
                let entries = HuggingFaceAPI.convertToDatasetEntries(
                    from: response,
                    textField: textField,
                    summaryField: summaryField
                )
                
                allEntries.append(contentsOf: entries)
                
                let progress = 0.3 + (0.6 * Double(batchIndex + 1) / Double(totalBatches))
                await MainActor.run {
                    downloadProgress = progress
                    statusMessage = "–ó–∞–≥—Ä—É–∂–µ–Ω–æ \(allEntries.count) –∏–∑ \(sampleSize) –∑–∞–ø–∏—Å–µ–π..."
                }
                
                print("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Ä—Ü–∏—è \(batchIndex + 1)/\(totalBatches): \(entries.count) –∑–∞–ø–∏—Å–µ–π")
            }
            
            await MainActor.run {
                statusMessage = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
                downloadProgress = 0.9
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            let finalEntries = Array(allEntries.prefix(sampleSize))
            
            let dataset = Dataset(
                name: name,
                description: description,
                source: source,
                category: category,
                entries: finalEntries,
                metadata: [
                    "huggingface_id": huggingFaceId,
                    "config": config ?? "default",
                    "text_field": textField,
                    "summary_field": summaryField,
                    "sample_size": "\(finalEntries.count)",
                    "total_dataset_size": "\(numRows)",
                    "download_date": ISO8601DateFormatter().string(from: Date())
                ]
            )
            
            await MainActor.run {
                isDownloading = false
                statusMessage = "–ó–∞–≥—Ä—É–∑–∫–∞ \(name) –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \(finalEntries.count) –∑–∞–ø–∏—Å–µ–π"
                downloadProgress = 1.0
            }
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç \(name): \(finalEntries.count) –∑–∞–ø–∏—Å–µ–π")
            return dataset
            
        } catch {
            await MainActor.run {
                isDownloading = false
                errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ \(name): \(error.localizedDescription)"
                statusMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
            }
            
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ \(name): \(error)")
            return nil
        }
    }
    
    /// –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    func cancelDownload() {
        isDownloading = false
        statusMessage = "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
    }
}
