//
//  HuggingFaceAPI.swift
//  SummarizationBenchmark
//
//  Created by Nikolay Petrov on 14.07.2025.
//

import Foundation

/// –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HuggingFace Datasets API
class HuggingFaceAPI {
    
    /// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è HuggingFace Datasets API
    private static let baseURL = "https://datasets-server.huggingface.co"
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
    struct DatasetInfo: Codable {
        let dataset_info: DatasetInfoDetails
        let partial: Bool
        
        struct DatasetInfoDetails: Codable {
            let dataset_name: String
            let config_name: String
            let features: [String: Feature]
            let splits: [String: SplitInfo]
            
            struct Feature: Codable {
                let dtype: String
                let _type: String
            }
            
            struct SplitInfo: Codable {
                let name: String
                let num_examples: Int
                let num_bytes: Int
            }
        }
    }
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
    struct DatasetResponse: Codable {
        let features: [FeatureInfo]
        let rows: [DatasetRow]
        let num_rows_total: Int?
        let num_rows_per_page: Int?
        let partial: Bool?
        
        struct FeatureInfo: Codable {
            let feature_idx: Int
            let name: String
            let type: FeatureType
            
            struct FeatureType: Codable {
                let dtype: String
                let _type: String
            }
        }
        
        struct DatasetRow: Codable {
            let row_idx: Int
            let row: [String: DatasetValue]
            let truncated_cells: [String]
        }
    }
    
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞
    enum DatasetValue: Codable {
        case string(String)
        case array([String])
        case null
        
        init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            
            if container.decodeNil() {
                self = .null
            } else if let stringValue = try? container.decode(String.self) {
                self = .string(stringValue)
            } else if let arrayValue = try? container.decode([String].self) {
                self = .array(arrayValue)
            } else {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                let stringValue = try container.decode(String.self)
                self = .string(stringValue)
            }
        }
        
        func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .string(let value):
                try container.encode(value)
            case .array(let value):
                try container.encode(value)
            case .null:
                try container.encodeNil()
            }
        }
        
        var stringValue: String? {
            switch self {
            case .string(let value):
                return value
            case .array(let values):
                return values.joined(separator: " ")
            case .null:
                return nil
            }
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
    static func fetchDatasetInfo(dataset: String, config: String? = nil, split: String = "train") async throws -> DatasetInfo {
        var urlComponents = URLComponents(string: "\(baseURL)/info")!
        urlComponents.queryItems = [
            URLQueryItem(name: "dataset", value: dataset),
            URLQueryItem(name: "split", value: split)
        ]
        
        if let config = config {
            urlComponents.queryItems?.append(URLQueryItem(name: "config", value: config))
        }
        
        guard let url = urlComponents.url else {
            throw HuggingFaceError.invalidURL
        }
        
        print("üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ: \(url.absoluteString)")
        
        let (data, response) = try await URLSession.shared.data(from: url)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw HuggingFaceError.invalidResponse
        }
        
        print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
        
        guard httpResponse.statusCode == 200 else {
            let responseString = String(data: data, encoding: .utf8) ?? "–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å"
            print("‚ùå HTTP –æ—à–∏–±–∫–∞ \(httpResponse.statusCode): \(responseString)")
            throw HuggingFaceError.httpError(httpResponse.statusCode)
        }
        
        do {
            let datasetInfo = try JSONDecoder().decode(DatasetInfo.self, from: data)
            return datasetInfo
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è DatasetInfo: \(error)")
            print("üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: \(String(data: data, encoding: .utf8) ?? "–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")")
            throw HuggingFaceError.decodingError(error)
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞
    static func fetchDatasetRows(
        dataset: String,
        config: String? = nil,
        split: String = "train",
        offset: Int = 0,
        length: Int = 100
    ) async throws -> DatasetResponse {
        var urlComponents = URLComponents(string: "\(baseURL)/rows")!
        urlComponents.queryItems = [
            URLQueryItem(name: "dataset", value: dataset),
            URLQueryItem(name: "split", value: split),
            URLQueryItem(name: "offset", value: String(offset)),
            URLQueryItem(name: "length", value: String(length))
        ]
        
        if let config = config {
            urlComponents.queryItems?.append(URLQueryItem(name: "config", value: config))
        }
        
        guard let url = urlComponents.url else {
            throw HuggingFaceError.invalidURL
        }
        
        print("üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞: \(url.absoluteString)")
        
        let (data, response) = try await URLSession.shared.data(from: url)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw HuggingFaceError.invalidResponse
        }
        
        print("üì° HTTP —Å—Ç–∞—Ç—É—Å (–¥–∞–Ω–Ω—ã–µ): \(httpResponse.statusCode)")
        
        guard httpResponse.statusCode == 200 else {
            let responseString = String(data: data, encoding: .utf8) ?? "–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å"
            print("‚ùå HTTP –æ—à–∏–±–∫–∞ (–¥–∞–Ω–Ω—ã–µ) \(httpResponse.statusCode): \(responseString)")
            throw HuggingFaceError.httpError(httpResponse.statusCode)
        }
        
        do {
            let datasetResponse = try JSONDecoder().decode(DatasetResponse.self, from: data)
            return datasetResponse
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è DatasetResponse: \(error)")
            print("üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ (–¥–∞–Ω–Ω—ã–µ): \(String(data: data, encoding: .utf8) ?? "–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")")
            throw HuggingFaceError.decodingError(error)
        }
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HuggingFace –¥–∞–Ω–Ω—ã—Ö –≤ DatasetEntry
    static func convertToDatasetEntries(
        from response: DatasetResponse,
        textField: String,
        summaryField: String
    ) -> [DatasetEntry] {
        return response.rows.compactMap { row in
            guard let text = row.row[textField]?.stringValue,
                  let summary = row.row[summaryField]?.stringValue,
                  !text.isEmpty, !summary.isEmpty else {
                return nil
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
            var metadata: [String: String] = [:]
            for (key, value) in row.row {
                if key != textField && key != summaryField,
                   let stringValue = value.stringValue {
                    metadata[key] = stringValue
                }
            }
            metadata["row_idx"] = String(row.row_idx)
            
            return DatasetEntry(
                text: text,
                referenceSummary: summary,
                metadata: metadata
            )
        }
    }
}

/// –û—à–∏–±–∫–∏ HuggingFace API
enum HuggingFaceError: LocalizedError {
    case invalidURL
    case invalidResponse
    case httpError(Int)
    case decodingError(Error)
    case datasetNotFound
    case fieldNotFound(String)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ HuggingFace API"
        case .invalidResponse:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç HuggingFace API"
        case .httpError(let code):
            return "HTTP –æ—à–∏–±–∫–∞: \(code)"
        case .decodingError(let error):
            return "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)"
        case .datasetNotFound:
            return "–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        case .fieldNotFound(let field):
            return "–ü–æ–ª–µ '\(field)' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ"
        }
    }
}
