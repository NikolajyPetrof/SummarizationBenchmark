//
//  BenchmarkViewModel.swift
//  SummarizationBenchmark
//
//  Created by Nikolay Petrov on 10.06.2025.
//

import Foundation
import SwiftUI
import MLX
import MLXLLM
import MLXLMCommon

// AsyncSemaphore –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ ModelContainer
actor AsyncSemaphore {
    private var value: Int
    private var waiters: [CheckedContinuation<Void, Never>] = []
    
    init(value: Int) {
        self.value = value
    }
    
    func wait() async {
        if value > 0 {
            value -= 1
        } else {
            await withCheckedContinuation { continuation in
                waiters.append(continuation)
            }
        }
    }
    
    func signal() {
        if waiters.isEmpty {
            value += 1
        } else {
            let waiter = waiters.removeFirst()
            waiter.resume()
        }
    }
}

@MainActor
class BenchmarkViewModel: ObservableObject {
    @Published var selectedModel: SummarizationModel?
    @Published var inputText = ""
    @Published var generatedSummary = ""
    @Published var isGenerating = false
    @Published var currentResult: BenchmarkResult?
    @Published var sessions: [BenchmarkSession] = []
    @Published var currentSession: BenchmarkSession?
    @Published var errorMessage: String?
    
    private let modelManager: ModelManager
    private let sessionManager = BenchmarkSessionManager()
    
    init(modelManager: ModelManager) {
        self.modelManager = modelManager
        loadSessions()
    }
    
    // –ò–∑–±—ã—Ç–æ—á–Ω—ã–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    
    func startNewSession(name: String, type: BenchmarkSession.SessionType = .custom) {
        currentSession = BenchmarkSession(
            name: name,
            type: type,
            results: []
        )
        
        // Save session to the list
        if let session = currentSession {
            sessions.append(session)
            saveSessionsToFile()
        }
    }
    
    @MainActor
    func runBenchmark(text: String, model: SummarizationModel, batchSize: Int = 1) async throws {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        guard !text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            throw SummarizerError.invalidInput
        }
        
        guard let container = modelManager.loadedModels[model.modelId] else {
            throw SummarizerError.modelNotLoaded
        }
        
        isGenerating = true
        let startTime = CFAbsoluteTimeGetCurrent()
        
        // –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –¥–æ –Ω–∞—á–∞–ª–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞
        let memoryBeforeBenchmark = getCurrentMemoryUsage()
        
        do {
            // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–∏–Ω–≥–∞
            if batchSize > 1 {
                print("‚ö†Ô∏è –í–ê–ñ–ù–û: MLX Swift –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π –±–∞—Ç—á–∏–Ω–≥")
                print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ \(batchSize) –∫–æ–ø–∏–π —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
                print("üìä –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
            } else {
                print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            }
            
            print("üìä –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: \(memoryBeforeBenchmark.used) MB")
            
            var summaries: [(String, Int)] = []
            var totalTokens = 0
            
            // –†–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è batchSize > 1
            if batchSize > 1 {
                // –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ ModelContainer
                // MLX –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
                let semaphore = AsyncSemaphore(value: 1)
                
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ø–∏–π —Ç–µ–∫—Å—Ç–∞
                summaries = try await withThrowingTaskGroup(of: (String, Int).self) { group in
                    var results: [(String, Int)] = []
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø—É
                    for i in 0..<batchSize {
                        group.addTask {
                            print("üîÅ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ \(i+1)/\(batchSize)")
                            return try await self.processSingleTextWithSemaphore(text: text, model: model, container: container, index: i+1, semaphore: semaphore)
                        }
                    }
                    
                    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for try await result in group {
                        results.append(result)
                        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–∞—Ç—á–∞")
                    }
                    
                    return results
                }
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                let singleResult = try await processSingleText(text: text, model: model, container: container, index: 1)
                summaries = [singleResult]
            }
            
            totalTokens = summaries.reduce(0) { $0 + $1.1 }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
            let summary = summaries.first ?? ("", 0)
            
            let endTime = CFAbsoluteTimeGetCurrent()
            let inferenceTime = endTime - startTime
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            let tokensCount = summary.1
            let tokensPerSecond = Double(totalTokens) / inferenceTime
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
            let quantType = model.modelId.contains("4bit") ? "4-bit" : 
                           model.modelId.contains("8bit") ? "8-bit" : "16-bit"
            
            let compressionRatio = Double(summary.0.count) / Double(text.count)
            
            // –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –±–µ–Ω—á–º–∞—Ä–∫–∞
            let memoryAfterBenchmark = getCurrentMemoryUsage()
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            let runtimeMemoryConsumption = max(0, memoryAfterBenchmark.used - memoryBeforeBenchmark.used)
            _ = max(0, memoryAfterBenchmark.peak - memoryBeforeBenchmark.peak)
            
            // –ß–µ—Å—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∞–º—è—Ç–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            // –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–º—è—Ç—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
            let memoryPerItem = batchSize > 1 ? runtimeMemoryConsumption : runtimeMemoryConsumption
            
            print("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print("   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.2f", inferenceTime))—Å")
            print("   ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: \(String(format: "%.1f", tokensPerSecond))")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: \(String(format: "%.1f", runtimeMemoryConsumption))MB")
            print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \(batchSize)")
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            let memEfficiency = runtimeMemoryConsumption > 0 ? Double(totalTokens) / runtimeMemoryConsumption * 100 : 0
            
            // –°–æ–∑–¥–∞–µ–º —á–µ—Å—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            let metrics = BenchmarkResult.PerformanceMetrics(
                loadTime: modelManager.getModelLoadTime(model.modelId) ?? 0,
                inferenceTime: inferenceTime,
                tokensPerSecond: tokensPerSecond,
                memoryUsed: memoryBeforeBenchmark.used,
                runtimeMemoryConsumption: runtimeMemoryConsumption,
                peakMemory: memoryAfterBenchmark.peak,
                memoryPerBatchItem: memoryPerItem,
                batchSize: batchSize,
                quantizationType: quantType,
                memoryEfficiency: memEfficiency,
                summaryLength: summary.0.count,
                compressionRatio: compressionRatio,
                inputLength: text.count,
                tokensGenerated: tokensCount
            )
            
            let result = BenchmarkResult(
                timestamp: Date(),
                modelName: model.name,
                modelId: model.modelId,
                inputText: text,
                generatedSummary: summary.0,
                metrics: metrics
            )
            
            currentResult = result
            generatedSummary = summary.0
            
            // Add to current session
            if var session = currentSession {
                session.results.append(result)
                currentSession = session
            }
            
        } catch {
            errorMessage = error.localizedDescription
            throw error
        }
        
        isGenerating = false
    }
    
    // MARK: - Helper Methods
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    private func processSingleTextWithSemaphore(text: String, model: SummarizationModel, container: ModelContainer, index: Int, semaphore: AsyncSemaphore) async throws -> (String, Int) {
        // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ ModelContainer
        await semaphore.wait()
        
        defer {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            Task {
                await semaphore.signal()
            }
        }
        
        return try await processSingleText(text: text, model: model, container: container, index: index)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏
    private func processSingleText(text: String, model: SummarizationModel, container: ModelContainer, index: Int) async throws -> (String, Int) {
        let prompt = model.configuration.createPrompt(for: text)
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–∞ \(index) —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª–∏–Ω–æ–π \(prompt.count) —Å–∏–º–≤–æ–ª–æ–≤")
        
        let result = try await container.perform { (context: ModelContext) -> (String, Int) in
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            let userInput = UserInput(prompt: prompt)
            let lmInput = try await context.processor.prepare(input: userInput)
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
            let generateParameters = GenerateParameters(
                maxTokens: model.configuration.maxTokens,
                temperature: model.configuration.temperature
            )
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API
            let stream = try MLXLMCommon.generate(
                input: lmInput,
                parameters: generateParameters,
                context: context
            )
            
            // –°–æ–±–∏—Ä–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            var localGeneratedText = ""
            var localTokenCount = 0
            
            for await generation in stream {
                if let chunk = generation.chunk {
                    localGeneratedText += chunk
                    localTokenCount += 1
                }
            }
            
            return (localGeneratedText, localTokenCount)
        }
        
        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ \(index): \(result.1) —Ç–æ–∫–µ–Ω–æ–≤, \(result.0.count) —Å–∏–º–≤–æ–ª–æ–≤")
        return result
    }
    
    private func getCurrentMemoryUsage() -> (used: Double, peak: Double) {
        let memoryInfo = modelManager.getMemoryInfo()
        let usedMB = Double(memoryInfo.used) / (1024 * 1024) // Convert to MB
        let peakMB = Double(memoryInfo.peak) / (1024 * 1024) // Convert to MB
        return (used: usedMB, peak: peakMB)
    }
    
    // –ú–µ—Ç–æ–¥ saveSession —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª –ª–æ–≥–∏–∫—É –∏–∑ startNewSession –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
    
    private func saveSessionsToFile() {
        sessionManager.saveSessions(sessions)
    }
    
    func loadSessions() {
        sessions = sessionManager.loadSessions()
        
        if let lastSession = sessions.last {
            currentSession = lastSession
        }
    }
    
    func clearCurrentResult() {
        currentResult = nil
        generatedSummary = ""
        errorMessage = nil
    }
    
    func deleteSession(_ session: BenchmarkSession) {
        sessions.removeAll { $0.id == session.id }
        if currentSession?.id == session.id {
            currentSession = nil
        }
        saveSessionsToFile()
    }
    
    func exportResults(from session: BenchmarkSession) -> URL? {
        return sessionManager.exportSessionAsCSV(session)
    }
}

// MARK: - Errors

enum SummarizerError: Error, LocalizedError {
    case modelNotLoaded
    case generationFailed(String)
    case invalidInput
    case memoryError
    
    var errorDescription: String? {
        switch self {
        case .modelNotLoaded:
            return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π."
        case .generationFailed(let message):
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(message)"
        case .invalidInput:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥."
        case .memoryError:
            return "–û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GPU –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."
        }
    }
}
